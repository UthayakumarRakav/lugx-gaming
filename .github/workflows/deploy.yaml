name: Lugx Gaming CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_HUB_USERNAME: rakavan
  KUBE_NAMESPACE: lugx-gaming
  FRONTEND_IMAGE: lugx-frontend
  GAME_SERVICE_IMAGE: game-service
  ORDER_SERVICE_IMAGE: order-service
  ANALYTICS_SERVICE_IMAGE: analytics-service

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    # Build and push frontend
    - name: Build and push frontend
      working-directory: frontend
      run: |
        docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }} .
        docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
    
    # Build and push game service
    - name: Build and push game service
      working-directory: services/game-service/app
      run: |
        docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.GAME_SERVICE_IMAGE }}:${{ github.sha }} .
        docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.GAME_SERVICE_IMAGE }}:${{ github.sha }}
    
    # Build and push order service
    - name: Build and push order service
      working-directory: services/order-service/app
      run: |
        docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.ORDER_SERVICE_IMAGE }}:${{ github.sha }} .
        docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.ORDER_SERVICE_IMAGE }}:${{ github.sha }}
    
    # Build and push analytics service
    - name: Build and push analytics service
      working-directory: services/analytics-service/app
      run: |
        docker build -t ${{ env.DOCKER_HUB_USERNAME }}/${{ env.ANALYTICS_SERVICE_IMAGE }}:${{ github.sha }} .
        docker push ${{ env.DOCKER_HUB_USERNAME }}/${{ env.ANALYTICS_SERVICE_IMAGE }}:${{ github.sha }}
    
    # Run integration tests
    - name: Run integration tests
      run: |
        # Add your integration test commands here
        echo "Running integration tests..."
        # Example: npm test in each service directory

  deploy-production:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.24.0'
    
    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
        chmod 600 ~/.kube/config
    
    # Blue-Green Deployment for Frontend
    - name: Deploy frontend (Blue-Green)
      run: |
        # Check if blue deployment exists
        BLUE_EXISTS=$(kubectl get deploy lugx-frontend-blue -n ${{ env.KUBE_NAMESPACE }} --ignore-not-found)
        
        if [ -z "$BLUE_EXISTS" ]; then
          # Initial deployment - create blue
          kubectl apply -f kubernetes/frontend/deployment.yaml -n ${{ env.KUBE_NAMESPACE }}
          kubectl set image deployment/lugx-frontend lugx-frontend=${{ env.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }} -n ${{ env.KUBE_NAMESPACE }}
          kubectl label deployment lugx-frontend color=blue -n ${{ env.KUBE_NAMESPACE }} --overwrite
          kubectl apply -f kubernetes/frontend/service.yaml -n ${{ env.KUBE_NAMESPACE }}
          kubectl apply -f kubernetes/frontend/ingress.yaml -n ${{ env.KUBE_NAMESPACE }}
        else
          # Determine current color
          CURRENT_COLOR=$(kubectl get deployment lugx-frontend -n ${{ env.KUBE_NAMESPACE }} -o jsonpath='{.metadata.labels.color}')
          
          if [ "$CURRENT_COLOR" = "blue" ]; then
            NEW_COLOR=green
            OLD_DEPLOYMENT=lugx-frontend-blue
          else
            NEW_COLOR=blue
            OLD_DEPLOYMENT=lugx-frontend-green
          fi
          
          # Create new deployment
          kubectl get deployment lugx-frontend -n ${{ env.KUBE_NAMESPACE }} -o yaml |             sed "s/name: lugx-frontend/name: lugx-frontend-$NEW_COLOR/" |             sed "s/color: $CURRENT_COLOR/color: $NEW_COLOR/" |             sed "s/image: .*/image: ${{ env.DOCKER_HUB_USERNAME }}\/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}/" |             kubectl apply -n ${{ env.KUBE_NAMESPACE }} -f -
          
          # Wait for new deployment to be ready
          kubectl rollout status deployment/lugx-frontend-$NEW_COLOR -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
          
          # Switch service to new deployment
          kubectl patch service lugx-frontend-service -n ${{ env.KUBE_NAMESPACE }} -p "{\"spec\":{\"selector\":{\"color\":\"$NEW_COLOR\"}}}"
          
          # Scale down old deployment
          kubectl scale deployment $OLD_DEPLOYMENT --replicas=0 -n ${{ env.KUBE_NAMESPACE }}
        fi
    
    # Deploy other services with rolling updates
    - name: Deploy game service
      run: |
        kubectl set image deployment/game-service game-service=${{ env.DOCKER_HUB_USERNAME }}/${{ env.GAME_SERVICE_IMAGE }}:${{ github.sha }} -n ${{ env.KUBE_NAMESPACE }}
        kubectl rollout status deployment/game-service -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
    
    - name: Deploy order service
      run: |
        kubectl set image deployment/order-service order-service=${{ env.DOCKER_HUB_USERNAME }}/${{ env.ORDER_SERVICE_IMAGE }}:${{ github.sha }} -n ${{ env.KUBE_NAMESPACE }}
        kubectl rollout status deployment/order-service -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
    
    - name: Deploy analytics service
      run: |
        kubectl set image deployment/analytics-service analytics-service=${{ env.DOCKER_HUB_USERNAME }}/${{ env.ANALYTICS_SERVICE_IMAGE }}:${{ github.sha }} -n ${{ env.KUBE_NAMESPACE }}
        kubectl rollout status deployment/analytics-service -n ${{ env.KUBE_NAMESPACE }} --timeout=300s
    
    - name: Verify deployments
      run: |
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
        kubectl get svc -n ${{ env.KUBE_NAMESPACE }}
